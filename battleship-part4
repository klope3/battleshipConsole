//#region Variables
const readline = require("readline-sync");
const letters = "abcdefghij";
const numbers = ["1","2","3","4","5","6","7","8","9","10",]; //expanded to array because 10 has two characters
const gridSize = 10;
const playerGrid = [];
const enemyGrid = [];
const instruction = "Enter a location to strike ie \'A2\'";
const repeatMessage = "You have already picked this location. Miss!";
const debugMessages = false;
const enemyCheats = false; //make the enemy hit one of our ships every time, for debugging only
let playerShipsRemaining = 0;
let enemyShipsRemaining = 0;
let useCheckerboardStrat = true; //stop using the strategy when we've run out of checkerboard-pattern spaces to hit
//#endregion
//#region Classes
class Input
{
    constructor(input)
    {
        this.letter = input.charAt(0).toLowerCase();
        this.number = input.slice(1);
        this.isValid = letters.includes(this.letter) && 
        numbers.includes(this.number);
        if (!this.isValid)
        {
            console.log("Invalid input! " + instruction);
            return;
        }
    }
}
class Cell
{
    constructor()
    {
        this.shipHere = null;
        this.wasHit = false;
    }
}
class Ship
{
    constructor(name, length, pointDown)
    {
        this.name = name;
        this.length = length;
        this.pointDown = pointDown;
        this.health = length;
    }
}
class Vector2 //used to express positions and directions
{
    constructor(x, y)
    {
        this.x = x;
        this.y = y;
    }
    add(vectorToAdd)
    {
        this.x += vectorToAdd.x;
        this.y += vectorToAdd.y;
    }
}
//#endregion
//#region Functions
const getRandomIndex = () => Math.floor(Math.random() * gridSize * gridSize);
const coordsToIndex = (x, y) => y * gridSize + x;
const indexToCoords = (index) => [index % gridSize, Math.floor(index / gridSize)];
const coordsToCellName = (x, y) => `${letters.charAt(y)}${x + 1}`;
const randomInt = (minInclusive, maxExclusive) => Math.floor(Math.random() * (maxExclusive - minInclusive)) + minInclusive;
const drawHorzLine = () => console.log("   +" + "----+".repeat(gridSize));
//#region Setup
function placeFleet(targetGrid)
{
    placeShip(new Ship("Destroyer", 2), targetGrid);
    placeShip(new Ship("Submarine", 3), targetGrid);
    placeShip(new Ship("Cruiser", 3), targetGrid);
    placeShip(new Ship("Battleship", 4), targetGrid);
    placeShip(new Ship("Carrier", 5), targetGrid);
}

function placeShip(ship, targetGrid)
{
    debugLog(`Preparing to place ${ship.name}`);
    let safety = 0;
    while (safety < 9999)
    {
        let randPos = new Vector2(randomInt(0, gridSize), randomInt(0, gridSize));
        let pointDown = Math.random() > 0.5 ? true : false;
        let cellRange = tryGetEmptyCellRange(randPos.x, randPos.y, ship.length, pointDown, targetGrid);
        let isPlayerShip = targetGrid === playerGrid;
        if (cellRange != null)
        {
            debugLog(`Placing ${ship.name} going ${pointDown ? "down" : "right"} from ${coordsToCellName(randPos.x, randPos.y)}`);
            for (cell of cellRange)
            {
                cell.shipHere = ship;
            }
            if (isPlayerShip) { playerShipsRemaining++; }
            else { enemyShipsRemaining++; }
            break;
        }
        debugLog("Placement failed.");
        safety++;
    }
    if (safety === 9999) { debugLog("ERROR: Runaway loop!"); }
}

function isInBounds(positionVector)
{
    return positionVector.x >= 0 && positionVector.x < gridSize &&
    positionVector.y >= 0 && positionVector.y < gridSize;
}

function buildBothGrids(squareSize)
{
    let cellCount = squareSize * squareSize;
    for (let i = 0; i < cellCount; i++)
    {
        playerGrid[i] = new Cell();
        enemyGrid[i] = new Cell();
    }
}
//#endregion
//#region General Actions
function hitIndex(targetGrid, index)
{
    debugLog("Hitting index " + index);
    targetGrid[index].wasHit = true;
    let shipHere = targetGrid[index].shipHere;
    let isPlayerAttack = targetGrid === enemyGrid;
    if (shipHere != null)
    {
        shipHere.health--;
        let resultMessage = isPlayerAttack ? "Hit!" : `The enemy hit your ${shipHere.name}.`;
        if (shipHere.health === 0)
        {
            if (isPlayerAttack) { enemyShipsRemaining--; }
            else { playerShipsRemaining--; }
            let messageExtra = isPlayerAttack ? ` You have sunk a ${shipHere.name}.` : " Sunk!";
            resultMessage += messageExtra;
        }
        return resultMessage;
    }
    else
    {
        let attackedCoords = indexToCoords(index);
        let [x, y] = attackedCoords;
        let missMessage = isPlayerAttack ? "You have missed!" : `The enemy attacked ${coordsToCellName(x, y)} and missed.`;
        return missMessage;
    }
}
//#endregion
//#region Player Actions
function playerAttackEnemy(input)
{
    let xCoordinate = input.number - 1;
    let yCoordinate = letters.indexOf(input.letter);
    let index = xCoordinate + yCoordinate * gridSize;

    if (enemyGrid[index].wasHit)
    {
        return repeatMessage;
    }
    let resultMessage = hitIndex(enemyGrid, index);
    return resultMessage;
}
//#endregion
//#region Enemy Actions
function enemyAttackPlayer()
{
    debugLog("Enemy attack");
    let index = chooseAttackIndex();
    let resultMessage = hitIndex(playerGrid, index);
    return resultMessage;
}

function chooseAttackIndex()
{
    //this is where more sophisticated AI would go, but this is currently out-of-scope
    let chosenIndex = enemyCheats ? getCheaterIndex() : getRandomUnhitIndex();
    return chosenIndex;
}

function getCheaterIndex()
{
    let unhitIndexes = playerGrid.filter((cell) => cell.shipHere != null && !cell.wasHit);
    return playerGrid.indexOf(unhitIndexes[0]); //will always be a spot with a player ship
}

function getRandomUnhitIndex()
{
    let randX;
    let randY;
    let index;
    let safety = 0;
    do
    {
        randX = useCheckerboardStrat? randomInt(0, 5) * 2 : randomInt(0, 10);
        randY = randomInt(0, 10);
        if (useCheckerboardStrat && randY % 2 != 0) { randX++; };
        safety++;
        index = coordsToIndex(randX, randY);
        debugLog("Checking " + randX + ", " + randY);

        if (safety === 100) 
        { 
            debugLog("Giving up on checkerboard strategy");
            useCheckerboardStrat = false; 
        }
    } while (playerGrid[index].wasHit && safety < 9999); //never choose an index we've already attacked
    if (safety === 9999) { debugLog("ERROR: Runaway loop!"); }
    return coordsToIndex(randX, randY);
}
//#endregion
//#region Drawing
function drawGrid(gridToDraw)
{
    let spacer = "-".repeat(20);
    let titleStr = gridToDraw === playerGrid ? `${spacer}YOUR SHIPS${spacer}` : `${spacer}ENEMY WATERS${spacer}`;
    console.log(titleStr);
    drawTopNumbers();
    drawHorzLine();
    for (let i = 0; i < gridSize; i++)
    {
        drawCellRow(i, gridToDraw);
        drawHorzLine();
    }
}

function drawCellRow(yCoordinate, gridToDraw)
{
    let str = `${letters.charAt(yCoordinate)}  |`;
    for (let xCoordinate = 0; xCoordinate < gridSize; xCoordinate++)
    {
        let index = coordsToIndex(xCoordinate, yCoordinate);
        let cellGraphic = "  ";
        let isPlayerGrid = gridToDraw === playerGrid;
        let shouldDrawShips = isPlayerGrid || (debugMessages && !isPlayerGrid);
        if (shouldDrawShips && gridToDraw[index].shipHere != null) 
        { 
            cellGraphic = gridToDraw[index].shipHere.name.slice(0, 2); 
        }
        if (gridToDraw[index].wasHit)
        {
            cellGraphic = gridToDraw[index].shipHere != null ? "XX" : "OO";
        }
        str += ` ${cellGraphic} |`;
    }
    console.log(str);
}

function drawTopNumbers()
{
    let str = " ".repeat(3);
    for (let i = 0; i < 10; i++)
    {
        str += `  ${i + 1}  `;
    }
    console.log(str);
}
//#endregion
//#region Misc
function tryGetEmptyCellRange(startX, startY, length, goDown, targetGrid)
{
    let curPos = new Vector2(startX, startY);
    let incrementor = goDown ? new Vector2(0, 1) : new Vector2(1, 0);
    let cellRange = [];
    for (let i = 0; i < length; i++)
    {
        let index = coordsToIndex(curPos.x, curPos.y);
        if (!isInBounds(curPos))
        {
            debugLog("The cell range went out of bounds.");
            return null;
        }
        if (targetGrid[index].shipHere != null) 
        { 
            debugLog(`The cell already has a ${targetGrid[index].shipHere.name}.`);
            return null; 
        }
        cellRange.push(targetGrid[index]);
        curPos.add(incrementor);
    }
    return cellRange;
}
//#endregion
function debugLog(message)
{
    if (debugMessages) { console.log(message); }
}
//#endregion
//#region Execution
readline.keyIn("Press any key to start the game.");
let quit = false;
let gameOverMessage = "";
do
{
    buildBothGrids(gridSize);
    placeFleet(playerGrid);
    placeFleet(enemyGrid);
    drawGrid(enemyGrid);
    //drawGrid(playerGrid);
    console.log(instruction);
    readline.promptLoop((inputStr) =>
    {
        if (inputStr.toLowerCase() === "quit") 
        { 
            quit = true;
            return true; 
        }
        let input = new Input(inputStr);
        if (input.isValid) 
        { 
            let playerResultMessage = playerAttackEnemy(input); 
            let enemyResultMessage = enemyAttackPlayer();
            drawGrid(enemyGrid);
            //drawGrid(playerGrid);
            console.log(playerResultMessage);
            console.log(enemyResultMessage);
        }
        let playerWins = enemyShipsRemaining === 0;
        let enemyWins = playerShipsRemaining === 0;
        gameOverMessage = playerWins ? 
        "You have destroyed all the enemy's battleships." : "The enemy has destroyed all your battleships.";
        gameOverMessage += " Would you like to play again?";
        return playerWins || enemyWins;
    });
} while (!quit && readline.keyInYN(gameOverMessage));
console.log("Successfully quit");
//#endregion